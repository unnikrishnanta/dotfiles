"
" ███▄    █ ▓█████  ▒█████   ██▒   █▓ ██▓ ███▄ ▄███▓
" ██ ▀█   █ ▓█   ▀ ▒██▒  ██▒▓██░   █▒▓██▒▓██▒▀█▀ ██▒
" ▓██  ▀█ ██▒▒███   ▒██░  ██▒ ▓██  █▒░▒██▒▓██    ▓██░
" ▓██▒  ▐▌██▒▒▓█  ▄ ▒██   ██░  ▒██ █░░░██░▒██    ▒██
" ▒██░   ▓██░░▒████▒░ ████▓▒░   ▒▀█░  ░██░▒██▒   ░██▒
" ░ ▒░   ▒ ▒ ░░ ▒░ ░░ ▒░▒░▒░    ░ ▐░  ░▓  ░ ▒░   ░  ░
" ░ ░░   ░ ▒░ ░ ░  ░  ░ ▒ ▒░    ░ ░░   ▒ ░░  ░      ░
"   ░   ░ ░    ░   ░ ░ ░ ▒       ░░   ▒ ░░      ░
"         ░    ░  ░    ░ ░        ░   ░         ░
"                                ░
" -----------------------------------------------------------------------------
"  GENERAL SETTINGS FOR EVERYONE
"  ----------------------------------------------------------------------------
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
set nocompatible

syntax on
filetype plugin indent on
set autoindent
set nomodeline " disable modeline vulnerability

" use 4 spaces for tabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
"Open split windows to the right
set splitright splitbelow
" Yank to system clipboard
set clipboard=unnamed
set backspace =indent,eol,start
set hidden
set laststatus =2

" Set linenumbers
set number
set relativenumber
set wrap

" column ruler at 80
" set ruler
set colorcolumn=80
highlight ColorColumn ctermbg=Green
"Wrap lines greater than 80
set textwidth=80
set wrapmargin=2

" Highlight searching
set incsearch
set showmatch
set hlsearch
set ignorecase
set smartcase
" incsearch for the replace command
set inccommand=nosplit

if executable('zsh')
    set shell=/bin/zsh " Load zsh as the terminal
	" set shellcmdflag=-l
endif
set autoread " autoread files
set mouse=a " use mouse for scroll or window size
"save only current buffer when focus is lost
augroup AutoWrite
    autocmd! BufLeave * :update
augroup END

call plug#begin('~/.local/share/nvim/plugged')
    " Plug 'autozimu/LanguageClient-neovim', {
    "     \ 'branch': 'next',
    "     \ 'do': 'bash install.sh',
    "     \ }
	" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	" Plug 'zchee/deoplete-jedi'
	Plug 'neoclide/coc.nvim', { 'branch': 'master', 'do': 'yarn install --frozen-lockfile' }
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-unimpaired'
	Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle' }
	Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
	" Plug '/usr/local/opt/fzf'
	Plug 'junegunn/fzf.vim'
	Plug 'airblade/vim-gitgutter'
	Plug 'tpope/vim-repeat'
	Plug 'ervandew/supertab'
	Plug 'SirVer/ultisnips'
	Plug 'honza/vim-snippets'
	Plug 'tpope/vim-commentary'
	" Dracula color theme
	Plug 'dracula/vim', { 'as': 'dracula' }
    Plug 'ryanoasis/vim-devicons'  " NERDTree icons
    Plug 'lervag/vimtex'
    Plug 'voldikss/vim-floaterm'
    Plug 'arzg/vim-colors-xcode'
    Plug 'majutsushi/tagbar'
    Plug 'victormours/better-writing.vim'
    Plug 'mechatroner/rainbow_csv'
    Plug 'sheerun/vim-polyglot'
	Plug 'gko/vim-coloresque'
    Plug 'ourigen/skyline.vim'
    Plug 'tpope/vim-abolish'
	Plug 'https://github.com/sainnhe/everforest'
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'vim-test/vim-test'
    Plug 'tpope/vim-dispatch'
    Plug 'skywind3000/asyncrun.vim'
    Plug 'reinh/vim-makegreen'
	" If you have nodejs and yarn
	Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
    Plug 'neomake/neomake'
    Plug 'preservim/vimux'
call plug#end()

let g:skyline_fugitive = 1
let g:deoplete#enable_at_startup = 1
" Automatically close the autocompletion window
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Tagbar to appear on the left instead of right
let g:tagbar_left = 1
let g:NERDTreeWinSize=23
" automatically close NerdTree when you open a file
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden=1
" Close NerdTree if it is the only open buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"To hide the warning:https://github.com/Xuyuanp/nerdtree-git-plugin/issues/154
autocmd VimEnter * unlet g:NERDTreeUpdateOnCursorHold

" Colour scheme settings
if has('termguicolors')
	set termguicolors
endif

" For dark version.
set background=dark

" For light version.
" set background=light

" Set contrast.
" This configuration option should be placed before `colorscheme everforest`.
" Available values: 'hard', 'medium'(default), 'soft'
let g:everforest_background = 'hard'

" For better performance
let g:everforest_better_performance = 1
colorscheme everforest
let g:airline_theme = 'everforest'

let g:airline_powerline_fonts = 1

" let g:dracula_italic = 0
" set termguicolors
" colorscheme dracula
" colorscheme xcodelighthc

" Use the same colorscheme as the terminal
highlight Normal ctermbg=None


" COC VIM settings
" ======================================
" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)


" Vimtex settings
" ======================================
" One of the neosnippet plugins will conceal symbols in LaTeX which is
" confusing
let g:tex_conceal = ""
" Vim Latex default viewer
" let g:vimtex_fold_manual = 1
let g:vimtex_fold_enabled = 0
let g:vimtex_fold_types = {'sections' : {'parse_levels': 1}}
" Hide quick fix window on warnings
let g:vimtex_quickfix_warnings = {
  \ 'default' : 0,
  \ 'undefined_reference' : 1,
  \ 'multiply_defined_references' : 1,
  \}
let g:vimtex_quickfix_open_on_warning = 0
let g:vimtex_compiler_latexmk = {
        \ 'continuous' : 0,
        \ 'executable' : 'latexmk',
        \ 'hooks' : [],
        \ 'options' : [
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ],
        \}

let g:tex_flavor = "latex"
let g:vimtex_view_automatic = 1
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_view_method = 'skim'

" Move Skim to the latex line after compiling
augroup MyVimtex
 autocmd!
 autocmd User VimtexEventCompileSuccess call vimtex#view#view()
augroup END

" TOC settings
let g:vimtex_toc_config = {
      \ 'name' : 'TOC',
      \ 'layers' : ['content', 'todo', 'include'],
      \ 'resize' : 1,
      \ 'split_width' : 50,
      \ 'todo_sorted' : 0,
      \ 'show_help' : 1,
      \ 'show_numbers' : 1,
      \ 'mode' : 2,
      \}

"Open bib file using \b
nnoremap <silent> <leader>bb :vsp<space>local.bib<CR>
"map \m to run make bbl
autocmd FileType tex nnoremap <silent> <leader>k :%!pfmat 79 <CR>
" General keyboard shortcuts
nnoremap <silent> <leader>w :update<CR>
nnoremap <silent> <leader>ww :update<CR>: call TrimWhitespace() <CR>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>wq :w<CR>:q<CR>
nnoremap <silent> <leader>wc :w<CR> :VimtexCountWords<CR>

" FZF Config
" ==================================================================
nnoremap <silent> <leader>ag :Ag<CR>
nnoremap <silent> <leader>bf :Buffers<CR>
nnoremap <silent> <leader>f : call Fzf_dev()<CR>

"  highlight yanked text
augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank { higroup='IncSearch', timeout=200 }
augroup END

" FZF file preview
" https://gist.github.com/acepukas/e4a13c34d9ce487a2ca4dfe7c6a48dce/52d4e215293e2024067219fa0076cfcd9df02086
" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Files + devicons
function! Fzf_dev()
  let l:fzf_files_options = '--preview "bat --theme="OneHalfDark" --style=numbers,changes --color always {2..-1} | head -'.&lines.'" --expect=ctrl-t,ctrl-v,ctrl-x --multi --bind=ctrl-a:select-all,ctrl-d:deselect-all'

  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(lines)
    if len(a:lines) < 2 | return | endif

    let l:cmd = get({'ctrl-x': 'split',
                 \ 'ctrl-v': 'vertical split',
                 \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')

    for l:item in a:lines[1:]
      let l:pos = stridx(l:item, ' ')
      let l:file_path = l:item[pos+1:-1]
      execute 'silent '. l:cmd . ' ' . l:file_path
    endfor
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink*':   function('s:edit_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down':    '40%' })
endfunction


" https://vi.stackexchange.com/a/456/23752
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

" Highlight trailing whitespace
highlight ws ctermbg=red guibg=red
match ws /\s\+$/
autocmd BufWinEnter * match ws /\s\+$/


" ==================== Ressize windows ===================================
nnoremap <S-Up> <C-w>+
nnoremap <S-Down> <C-w>-
nnoremap <S-Right> <C-w>>
nnoremap <S-Left> <C-w><
" ==================== Other keyboard bindings =============================
" cd vim into the directory of the current buffer.
nnoremap <leader>cd :cd %:p:h<CR>
" Search and replace the current visual selection
xnoremap gs y:%s/<C-r>"//g<Left><Left>
nnoremap <leader>sc :setlocal spell! spelllang=en_us <CR>
nnoremap <leader>bw :set syntax=better-writing <CR>
nnoremap <leader>o :NERDTreeToggle <CR>

" vim-test shortcuts
nmap <silent> <leader>tt :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>tc :TestClass --verbose<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast --verbose <CR>
nmap <silent> <leader>tg :TestVisit<CR>

" Other vim-test configs
let test#strategy = "vimux"
let test#python#runner = 'pytest'

"Remove all trailing whitespace
noremap <Leader>dw :call TrimWhitespace() <CR>

"Switching between panes
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Switching between terminal and normal panes just as above
tnoremap <C-w>h <C-\><C-n><C-w>h
tnoremap <C-w>j <C-\><C-n><C-w>j
tnoremap <C-w>k <C-\><C-n><C-w>k
tnoremap <C-w>l <C-\><C-n><C-w>l

"This unsets the last search pattern register by hitting return
nnoremap <CR> :noh<CR><CR>
"Splits the line under the cursor and auto-indents second line
nnoremap S :keeppatterns substitute/\s*\%#\s*/\r/e <bar> normal! ==<CR>
" make YCM compatible with UltiSnips (using supertab)
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Dragging visual blocks using dragvisuals.vim
" https://docs.google.com/file/d/0Bx3f0gFZh5Jqc0MtcUstV3BKdTQ/edit
vmap <expr> <LEFT> DVB_Drag('left')
vmap <expr> <RIGHT> DVB_Drag('right')
vmap <expr> <DOWN> DVB_Drag('down')
vmap <expr> <UP> DVB_Drag('up')
vmap <expr> D DVB_Duplicate()

" Source vimrc on updates
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,init.vim so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Put this at the bottom to work
" Disable --INSERT-- or --VISUAL-- in the status line
set noshowmode

" vim-floaterm mappings
let g:floaterm_keymap_toggle = '<F9>'
nmap <F8> :TagbarToggle<CR>
